#pragma once

#include "khronos_common/CommonDefine.h"
#include "khronos_common/art/InnerNode.h"
#include "khronos_common/art/Node16.h"
#include "khronos_common/art/Node256.h"

namespace khronos_common {
namespace art {

class Node48 : public InnerNode
{
    friend class Node16;
    friend class Node256;
    
public:
    Node48();
    ~Node48();

    Node* FindChild(uint8_t partialKey) const ;
    void SetChild(uint8_t partialKey, Node* child) ;
    void DelChild(uint8_t partialKey, Node* child) ;

    InnerNode* Grow() ;
    InnerNode* Shrink() ;

    bool IsFull() const ;
    bool IsUnderfull() const ;

    uint8_t GetChildrenNumber() const ;
    uint8_t GetNodeType() const ;

    uint8_t NextPartialKey(uint8_t partialKey) const ;
    uint8_t PrevPartialKey(uint8_t partialKey) const ;

    void printNode() const;
    
private:
    // 4(header) + 12 + 256 + 48*8 = 656 bytes
    uint8_t prefix[12];
    uint8_t index[256];
    Node* children[48];
    
    AUTIL_LOG_DECLARE();
};

KR_DEFINE_SHARED_PTR(Node48);

} // namespace art
} // namespace khronos
